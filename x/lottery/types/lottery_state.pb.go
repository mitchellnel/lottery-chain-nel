// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lottery/lottery_state.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LotteryState_LOTTERY_STATE int32

const (
	LotteryState_CLOSED             LotteryState_LOTTERY_STATE = 0
	LotteryState_CALCULATING_WINNER LotteryState_LOTTERY_STATE = 1
	LotteryState_OPEN               LotteryState_LOTTERY_STATE = 2
)

var LotteryState_LOTTERY_STATE_name = map[int32]string{
	0: "CLOSED",
	1: "CALCULATING_WINNER",
	2: "OPEN",
}

var LotteryState_LOTTERY_STATE_value = map[string]int32{
	"CLOSED":             0,
	"CALCULATING_WINNER": 1,
	"OPEN":               2,
}

func (x LotteryState_LOTTERY_STATE) String() string {
	return proto.EnumName(LotteryState_LOTTERY_STATE_name, int32(x))
}

func (LotteryState_LOTTERY_STATE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f0ac9be3a4edf546, []int{0, 0}
}

type LotteryState struct {
	LotteryState LotteryState_LOTTERY_STATE `protobuf:"varint,1,opt,name=lottery_state,json=lotteryState,proto3,enum=lotterychainnel.lottery.LotteryState_LOTTERY_STATE" json:"lottery_state,omitempty"`
}

func (m *LotteryState) Reset()         { *m = LotteryState{} }
func (m *LotteryState) String() string { return proto.CompactTextString(m) }
func (*LotteryState) ProtoMessage()    {}
func (*LotteryState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0ac9be3a4edf546, []int{0}
}
func (m *LotteryState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LotteryState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LotteryState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LotteryState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LotteryState.Merge(m, src)
}
func (m *LotteryState) XXX_Size() int {
	return m.Size()
}
func (m *LotteryState) XXX_DiscardUnknown() {
	xxx_messageInfo_LotteryState.DiscardUnknown(m)
}

var xxx_messageInfo_LotteryState proto.InternalMessageInfo

func (m *LotteryState) GetLotteryState() LotteryState_LOTTERY_STATE {
	if m != nil {
		return m.LotteryState
	}
	return LotteryState_CLOSED
}

func init() {
	proto.RegisterEnum("lotterychainnel.lottery.LotteryState_LOTTERY_STATE", LotteryState_LOTTERY_STATE_name, LotteryState_LOTTERY_STATE_value)
	proto.RegisterType((*LotteryState)(nil), "lotterychainnel.lottery.LotteryState")
}

func init() { proto.RegisterFile("lottery/lottery_state.proto", fileDescriptor_f0ac9be3a4edf546) }

var fileDescriptor_f0ac9be3a4edf546 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xce, 0xc9, 0x2f, 0x29,
	0x49, 0x2d, 0xaa, 0xd4, 0x87, 0xd2, 0xf1, 0xc5, 0x25, 0x89, 0x25, 0xa9, 0x7a, 0x05, 0x45, 0xf9,
	0x25, 0xf9, 0x42, 0xe2, 0x50, 0xc1, 0xe4, 0x8c, 0xc4, 0xcc, 0xbc, 0xbc, 0xd4, 0x1c, 0x3d, 0x28,
	0x5f, 0x69, 0x39, 0x23, 0x17, 0x8f, 0x0f, 0x84, 0x1d, 0x0c, 0x52, 0x2f, 0x14, 0xc1, 0xc5, 0x8b,
	0x62, 0x80, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0xb1, 0x1e, 0x0e, 0x13, 0xf4, 0x90, 0x75,
	0xeb, 0xf9, 0xf8, 0x87, 0x84, 0xb8, 0x06, 0x45, 0xc6, 0x07, 0x87, 0x38, 0x86, 0xb8, 0x06, 0xf1,
	0xe4, 0x20, 0xc9, 0x29, 0xd9, 0x72, 0xf1, 0xa2, 0x48, 0x0b, 0x71, 0x71, 0xb1, 0x39, 0xfb, 0xf8,
	0x07, 0xbb, 0xba, 0x08, 0x30, 0x08, 0x89, 0x71, 0x09, 0x39, 0x3b, 0xfa, 0x38, 0x87, 0xfa, 0x38,
	0x86, 0x78, 0xfa, 0xb9, 0xc7, 0x87, 0x7b, 0xfa, 0xf9, 0xb9, 0x06, 0x09, 0x30, 0x0a, 0x71, 0x70,
	0xb1, 0xf8, 0x07, 0xb8, 0xfa, 0x09, 0x30, 0x39, 0x59, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91,
	0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3,
	0xb1, 0x1c, 0x43, 0x94, 0x22, 0xd4, 0x1a, 0x5d, 0xb0, 0xdb, 0x74, 0xf3, 0x52, 0x73, 0xf4, 0x2b,
	0x60, 0xa1, 0xa0, 0x5f, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x06, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xf7, 0x18, 0x7f, 0x30, 0x25, 0x01, 0x00, 0x00,
}

func (m *LotteryState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LotteryState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LotteryState != 0 {
		i = encodeVarintLotteryState(dAtA, i, uint64(m.LotteryState))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLotteryState(dAtA []byte, offset int, v uint64) int {
	offset -= sovLotteryState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LotteryState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LotteryState != 0 {
		n += 1 + sovLotteryState(uint64(m.LotteryState))
	}
	return n
}

func sovLotteryState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLotteryState(x uint64) (n int) {
	return sovLotteryState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LotteryState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLotteryState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryState", wireType)
			}
			m.LotteryState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLotteryState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryState |= LotteryState_LOTTERY_STATE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLotteryState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLotteryState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLotteryState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLotteryState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLotteryState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLotteryState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLotteryState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLotteryState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLotteryState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLotteryState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLotteryState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLotteryState = fmt.Errorf("proto: unexpected end of group")
)
