// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lottery/last_winner.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LastWinner struct {
}

func (m *LastWinner) Reset()         { *m = LastWinner{} }
func (m *LastWinner) String() string { return proto.CompactTextString(m) }
func (*LastWinner) ProtoMessage()    {}
func (*LastWinner) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a9f3bac52f8b7e2, []int{0}
}
func (m *LastWinner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastWinner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastWinner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastWinner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastWinner.Merge(m, src)
}
func (m *LastWinner) XXX_Size() int {
	return m.Size()
}
func (m *LastWinner) XXX_DiscardUnknown() {
	xxx_messageInfo_LastWinner.DiscardUnknown(m)
}

var xxx_messageInfo_LastWinner proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LastWinner)(nil), "lotterychainnel.lottery.LastWinner")
}

func init() { proto.RegisterFile("lottery/last_winner.proto", fileDescriptor_8a9f3bac52f8b7e2) }

var fileDescriptor_8a9f3bac52f8b7e2 = []byte{
	// 128 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcc, 0xc9, 0x2f, 0x29,
	0x49, 0x2d, 0xaa, 0xd4, 0xcf, 0x49, 0x2c, 0x2e, 0x89, 0x2f, 0xcf, 0xcc, 0xcb, 0x4b, 0x2d, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x87, 0x4a, 0x25, 0x67, 0x24, 0x82, 0x84, 0x73, 0xf4,
	0xa0, 0x7c, 0x25, 0x1e, 0x2e, 0x2e, 0x9f, 0xc4, 0xe2, 0x92, 0x70, 0xb0, 0x62, 0x27, 0xeb, 0x13,
	0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86,
	0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0x52, 0x84, 0x6a, 0xd0, 0x05, 0x9b, 0xa0,
	0x9b, 0x97, 0x9a, 0xa3, 0x5f, 0xa1, 0x0f, 0xb3, 0xaf, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d,
	0x6c, 0x95, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x05, 0x95, 0xaa, 0x55, 0x87, 0x00, 0x00, 0x00,
}

func (m *LastWinner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastWinner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastWinner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintLastWinner(dAtA []byte, offset int, v uint64) int {
	offset -= sovLastWinner(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LastWinner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovLastWinner(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLastWinner(x uint64) (n int) {
	return sovLastWinner(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LastWinner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLastWinner
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastWinner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastWinner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLastWinner(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLastWinner
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLastWinner(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLastWinner
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLastWinner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLastWinner
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLastWinner
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLastWinner
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLastWinner
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLastWinner        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLastWinner          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLastWinner = fmt.Errorf("proto: unexpected end of group")
)
